var basics = require "./basics";
var errorFun = basics.errorFun;
var errorMsg = basics.errorMsg;
var _stringEncodeStr = basics._stringEncodeStr;
var stringEncodeStr = basics.stringEncodeStr;


var loaderStr = function(par){
  var resStr = "";
  var i;
//      _define(\"__promiselandModule\" + " + stringEncodeStr(par.hashStr) + ", par1, function(){

  resStr += "(function(){
  var defineFun;
  var requireFun;
  
  if (typeof exports == \"object\" && typeof module == \"object\"){ // CommonJS
    requireFun = function(modulesAr, callback, errBack){
      try{
        var i = 0;
        var l = modulesAr.length;
        var args = [];
        for (i; i < l; ++i){
          args.push(require(modulesAr[i]));
        };
      }catch(e){
        errBack(e);
        return;
      };
      callback.apply(callback, args);
    };
    defineFun = function(requireAr, callback){
      requireFun(requireAr, function(){
        module.exports = callback.apply(callback, arguments);
      });
    };
    
  }else if (typeof define == \"function\" && define.amd){ // AMD
    var _define = define;
    requireFun = require;
    
    defineFun = function(par1, par2){
      if (par1 instanceof Array){
        par1.unshift(\"require\");
      }else{
        par2 = par1;
        par1 = [\"require\"];
      };
      _define(par1, function(){
        requireFun = arguments[0];
        var args = [];
        for (var i = 1; i < arguments.length; ++i){
          args.push(arguments[i]);
        };
        return par2.apply(par2, args);
      });
    };
    
  }else{ // Plain browser env
    alert(\"not working out!\");
    
  };
  ";
  var modules = [];
  if (!par.promiseLandModule){    
    modules.push({
      varName: "promiseland",
      moduleName: "promiseland"
    });
  };
  var extraModules = par.extraModules;
  if (extraModules){
    var extraModulesAr = extraModules.getArray();
    for (i = 0; i < extraModulesAr.length; ++i){
      modules.push({
        varName: par.variableNames.get(extraModulesAr[i].key),
        moduleName: extraModulesAr[i].value
      });
    };
  };

  resStr += "defineFun([";
  for (i = 0; i < modules.length; ++i){
    if (i){
      resStr += ", ";
    };
    resStr += stringEncodeStr(modules[i].moduleName);
  };
  resStr += "], function(";
  for (i = 0; i < modules.length; ++i){
    if (i){
      resStr += ", ";
    };
    resStr += modules[i].varName;
  };
  resStr += "){\n";
  if (par.promiseLandModule){
    resStr += "var __execute = function(promiseland, extra){ __execute = undefined; var __require = requireFun;\n";
  }else{
    resStr += "var __require = requireFun;\n";
  };
  resStr += "\n";
  if (par.usePromise || par.useRequire){
    resStr += "var __Promise = promiseland.Promise;\n";
    resStr += "var Promise = promiseland.Promise;\n";
  };
  if (par.useClassSystem){
    resStr += "var classSystem = promiseland.classSystem;\n";
  };
  if (par.useRequire){
    resStr += "var __requireFun = function(parModule){
      var returnPromise = new __Promise();
      try{__require([parModule], function(m){
        if (promiseland.isPromiseLandPromisingModule(m)){
          m.then(function(realm){returnPromise.resolve(realm);}, function(e){returnPromise.reject(e);});
        }else{
          returnPromise.resolve(m);
        };
        }, function(err){ returnPromise.reject(err); });
      }catch(e){ returnPromise.reject(e); };
      return returnPromise.promise;};
    ";
  };
      return resStr;
    };

return loaderStr;
